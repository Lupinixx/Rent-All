@using PagedList.Mvc
@model Rent_All_Certificate.Models.ProductIndexModel

<div class="row">
    <div class="col-xs-3">
        <p>
            @Html.ActionLink("Create New", "Create", null, new { @class = "btn btn-success" })
        </p>
    </div>
    <div class="col-xs-3">
        <div class="input-group custom-search-form">
            @using (@Html.BeginForm("Index", "Products", FormMethod.Get))
            {
                @Html.Hidden("selectedCategory", Model.SelectedCategory)
                @Html.TextBox("search", null, new { @class = "form-control", placeholder = "ProductKey" })

                <span class="input-group-btn">
                    <button class="btn btn-default" type="submit">
                        <i class="fa fa-search"></i>
                    </button>
                </span>
            }
        </div>
    </div>
    <div class="col-xs-4">
        @using (Ajax.BeginForm("UpdateProductIndex", "Products", new AjaxOptions
    {
        HttpMethod = "GET",
        UpdateTargetId = "ProductList",
        InsertionMode = InsertionMode.Replace
    }))
        {
            for (var i = 0; i < Model.CategorySelectList.Count(); i++)
            {
                @Html.DropDownList("[" + i + "].SelectCategory",
            new SelectList(Model.CategorySelectList[i].CategoriesSelectList, "CategoryID", "CategoryName", Model.CategorySelectList[i].SelectedCategoryId),
            "Select a category",
            new
            {
                onchange = "$('input#SelectedCategory').val($(this).val()); $('#categorySelect').click();",
                @class = "form-control"
            })
            }
            <input type="hidden" id="SelectedCategory" name="selectedCategory" />
            @Html.HiddenFor(model => model.Search)
            <input type="submit" id="categorySelect" value="Search" class="hidden" />
        }
    </div>
    <div class="col-xs-2">
        <a href="@Url.Action("Index", "Products")" class="btn btn-primary"><span class="glyphicon glyphicon-refresh"></span> Reset</a>
    </div>
</div>
@if (Model.ProductTabelList != null && Model.ProductTabelList.Any())
{
    <div class="table-responsive">
    <table class="table table-striped">
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.ProductTabelList.FirstOrDefault().ProductKey)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.ProductTabelList.FirstOrDefault().ProductName)
            </th>
            <th></th>
            <th>Inventory</th>
        </tr>
        @foreach (var item in Model.ProductTabelList)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.ProductKey)
                </td>
                @if (item.Inventory.Count > 0)
                {
                    <td>
                        @Html.ActionLink(item.Manufacturer.ManufacturerName + " - " + item.ProductName, "InventoryIndex", new {key = item.ProductKey})
                    </td>
                }
                else
                {
                    <td>
                        @Html.DisplayFor(modelItem => item.Manufacturer.ManufacturerName) - @Html.DisplayFor(modelItem => item.ProductName)
                    </td>
                }
                <td>
                    @Html.ActionLink("Edit", "Edit", new {id = item.ProductKey}) |
                    @if (item.Inventory.Count > 0)
                    {
                        <a class="grayLink" href="#">Delete</a>
                    }
                    else
                    {
                        @Html.ActionLink("Delete", "Delete", new {id = item.ProductKey}, new {onclick = "return confirm('Are you sure you want to delete?')"})
                    }
                </td>
                <td>@Html.DisplayFor(modelItem => item.Inventory.Count)</td>
            </tr>
        }
    </table>
        </div>
        @Html.PagedListPager(Model.ProductTabelList, page => Url.Action("Index", new { page, selectedCategory = Model.SelectedCategory }), new PagedListRenderOptions() { Display = PagedListDisplayMode.IfNeeded })
        }
        else
        {
        <div>No product(s) were found.</div>
        }
