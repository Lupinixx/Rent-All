

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


namespace Rent_All_Certificate.Models
{

using System;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;

using System.Data.Entity.Core.Objects;
using System.Linq;


public partial class RentAllEntities : DbContext
{
    public RentAllEntities()
        : base("name=RentAllUserEntities")
    {

    }

    protected override void OnModelCreating(DbModelBuilder modelBuilder)
    {
        throw new UnintentionalCodeFirstException();
    }


    public virtual DbSet<Branch> Branch { get; set; }

    public virtual DbSet<Category> Category { get; set; }

    public virtual DbSet<CertificateType> CertificateType { get; set; }

    public virtual DbSet<Certification> Certification { get; set; }

    public virtual DbSet<CertificationLog> CertificationLog { get; set; }

    public virtual DbSet<Employee> Employee { get; set; }

    public virtual DbSet<Inventory> Inventory { get; set; }

    public virtual DbSet<Manufacturer> Manufacturer { get; set; }

    public virtual DbSet<Phase> Phase { get; set; }

    public virtual DbSet<Product> Product { get; set; }

    public virtual DbSet<Role> Role { get; set; }

    public virtual DbSet<Fired> Fired { get; set; }


    public virtual int addHoist(string description, string dimensions, string material, string heattreatment, string proofLoadApplied, string workingLoadLimit, string safetyFactor, Nullable<int> productKey, string productName, Nullable<int> manufacturerID)
    {

        var descriptionParameter = description != null ?
            new ObjectParameter("Description", description) :
            new ObjectParameter("Description", typeof(string));


        var dimensionsParameter = dimensions != null ?
            new ObjectParameter("Dimensions", dimensions) :
            new ObjectParameter("Dimensions", typeof(string));


        var materialParameter = material != null ?
            new ObjectParameter("Material", material) :
            new ObjectParameter("Material", typeof(string));


        var heattreatmentParameter = heattreatment != null ?
            new ObjectParameter("Heattreatment", heattreatment) :
            new ObjectParameter("Heattreatment", typeof(string));


        var proofLoadAppliedParameter = proofLoadApplied != null ?
            new ObjectParameter("ProofLoadApplied", proofLoadApplied) :
            new ObjectParameter("ProofLoadApplied", typeof(string));


        var workingLoadLimitParameter = workingLoadLimit != null ?
            new ObjectParameter("WorkingLoadLimit", workingLoadLimit) :
            new ObjectParameter("WorkingLoadLimit", typeof(string));


        var safetyFactorParameter = safetyFactor != null ?
            new ObjectParameter("SafetyFactor", safetyFactor) :
            new ObjectParameter("SafetyFactor", typeof(string));


        var productKeyParameter = productKey.HasValue ?
            new ObjectParameter("ProductKey", productKey) :
            new ObjectParameter("ProductKey", typeof(int));


        var productNameParameter = productName != null ?
            new ObjectParameter("ProductName", productName) :
            new ObjectParameter("ProductName", typeof(string));


        var manufacturerIDParameter = manufacturerID.HasValue ?
            new ObjectParameter("ManufacturerID", manufacturerID) :
            new ObjectParameter("ManufacturerID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("addHoist", descriptionParameter, dimensionsParameter, materialParameter, heattreatmentParameter, proofLoadAppliedParameter, workingLoadLimitParameter, safetyFactorParameter, productKeyParameter, productNameParameter, manufacturerIDParameter);
    }

}

}

